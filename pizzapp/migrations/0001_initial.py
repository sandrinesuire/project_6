# Generated by Django 2.1.2 on 2019-04-30 18:01

from decimal import Decimal
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The address title.', max_length=100, null=True)),
                ('address_one', models.CharField(help_text='The first address line.', max_length=400)),
                ('address_two', models.CharField(help_text='The second address line.', max_length=400, null=True)),
                ('zip_code', models.CharField(help_text='The address zip code.', max_length=20)),
                ('city', models.CharField(help_text='The city.', max_length=100)),
                ('country', models.CharField(help_text='The country.', max_length=100, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='The longitude et latitude point for the point_of_sale.', null=True, srid=4326)),
                ('google_place_id', models.TextField(help_text='The place id from google api.', null=True, unique=True)),
                ('loc_address', models.TextField(help_text='The located address from api google.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Command',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delay', models.DateTimeField(help_text='The date for command delivery. This information can be set generally in command or individually in command line')),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommandLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=3, help_text='The quantity of the component.', max_digits=8, null=True)),
                ('delay', models.DateTimeField(help_text='The date for command delivery. This information can be set generally in command or individually in command line')),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
                ('command', models.OneToOneField(help_text='The command.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Command')),
            ],
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The component name.', max_length=100)),
                ('stock', models.DecimalField(decimal_places=3, default=0, help_text='The stock of the component.', max_digits=8)),
                ('in_command', models.DecimalField(decimal_places=3, default=0, help_text='The quantity in command for the component.', max_digits=8)),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ComponentPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost_price_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='EUR', editable=False, max_length=3)),
                ('cost_price', djmoney.models.fields.MoneyField(decimal_places=2, default=Decimal('0.0'), default_currency='EUR', help_text='Price of the component.', max_digits=7)),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
                ('component', models.ForeignKey(help_text='The component.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Component')),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Employed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delay', models.DateTimeField(help_text='The date for order delivery.')),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
                ('customer', models.ForeignKey(help_text='The customer.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Customer')),
                ('employed', models.ForeignKey(help_text='The employed whose valid the command.', null=True, on_delete=django.db.models.deletion.PROTECT, to='pizzapp.Employed')),
            ],
        ),
        migrations.CreateModel(
            name='OrderLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, help_text='The quantity of the pizza.')),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
                ('order', models.ForeignKey(help_text='The order.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Order')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='EUR', editable=False, max_length=3)),
                ('montant', djmoney.models.fields.MoneyField(decimal_places=2, default=Decimal('0.0'), default_currency='EUR', help_text='The montant of payment.', max_digits=7)),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
                ('order', models.ForeignKey(help_text='The order.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Order')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(help_text='Unique label for a payment method.', max_length=20, unique=True)),
                ('description', models.CharField(help_text='Description for the payment method.', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='The first name.', max_length=100, null=True)),
                ('last_name', models.CharField(help_text='The last name.', max_length=100, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(help_text='The phone number.', max_length=50, null=True, region=None)),
                ('email', models.EmailField(help_text='The phone number.', max_length=50, null=True, unique=True)),
                ('password', models.CharField(help_text='The user password.', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Pizza',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The pizza name.', max_length=100, unique=True)),
                ('price_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='EUR', editable=False, max_length=3)),
                ('price', djmoney.models.fields.MoneyField(decimal_places=2, default=Decimal('0.0'), default_currency='EUR', help_text='Price of the pizza.', max_digits=7)),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PizzaCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The pizza card name.', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
                ('employed', models.ForeignKey(help_text='The employed registrering the pizza card.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.Employed')),
                ('pizzas', models.ManyToManyField(help_text='The list of pizzas for the pizza card.', to='pizzapp.Pizza')),
            ],
        ),
        migrations.CreateModel(
            name='PizzaLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=3, help_text='The quantity of the component.', max_digits=8)),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
                ('component', models.ForeignKey(help_text='The supplier.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.Component')),
                ('pizza', models.ForeignKey(help_text='The pizza.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Pizza')),
            ],
        ),
        migrations.CreateModel(
            name='Pizzeria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The pizzeria name.', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(help_text='The person role.', max_length=100, unique=True)),
                ('description', models.TextField(help_text='The description role.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(help_text='Unique label for a order status.', max_length=20, unique=True)),
                ('description', models.CharField(help_text='Description for the order status.', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True, help_text='The Datetime for the movement.')),
                ('quantity', models.DecimalField(decimal_places=3, help_text='The quantity of the component.', max_digits=8, null=True)),
                ('stock_before', models.DecimalField(decimal_places=3, help_text='The stock of the component before the movement.', max_digits=8, null=True)),
                ('stock_after', models.DecimalField(decimal_places=3, help_text='The quantity of the component after the movement.', max_digits=8, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
                ('command_line', models.ForeignKey(help_text='The supplier command line responsive of the movement.', null=True, on_delete=django.db.models.deletion.CASCADE, to='pizzapp.CommandLine')),
                ('component', models.ForeignKey(help_text='The component.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Component')),
                ('order_line', models.ForeignKey(help_text='The order line responsive of the movement.', null=True, on_delete=django.db.models.deletion.CASCADE, to='pizzapp.OrderLine')),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(help_text='The company name.', max_length=400)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(help_text='The phone number.', max_length=50, null=True, region=None)),
                ('email', models.EmailField(help_text='The phone number.', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='The boolean for activity.')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='The registration date.')),
                ('inactivity_date', models.DateField(help_text='The date for inactivity declaration.', null=True)),
                ('comment', models.TextField(help_text='The eventual comment.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TypeAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='The type of address.', max_length=100)),
                ('address', models.ForeignKey(help_text='The address for this pizzeria.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.Address')),
            ],
        ),
        migrations.CreateModel(
            name='UnitOfMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(help_text='Unique label for a unit of measure.', max_length=20, unique=True)),
                ('description', models.CharField(help_text='Description for the unit of measure.', max_length=100, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='supplier',
            name='type_address',
            field=models.OneToOneField(help_text='The address for this supplier.', null=True, on_delete=django.db.models.deletion.CASCADE, to='pizzapp.TypeAddress'),
        ),
        migrations.AddField(
            model_name='stockmovement',
            name='unit_of_measure',
            field=models.ForeignKey(help_text='The unit of measure.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.UnitOfMeasure'),
        ),
        migrations.AddField(
            model_name='pizzeria',
            name='type_address',
            field=models.OneToOneField(help_text='The type address for this pizzeria.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.TypeAddress'),
        ),
        migrations.AddField(
            model_name='pizzaline',
            name='unit_of_measure',
            field=models.ForeignKey(help_text='The unit of measure.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.UnitOfMeasure'),
        ),
        migrations.AddField(
            model_name='pizzacard',
            name='pizzeria',
            field=models.ForeignKey(help_text='The pizzeria concerned by the pizza card.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Pizzeria'),
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_method',
            field=models.ForeignKey(help_text='The payment method.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.PaymentMethod'),
        ),
        migrations.AddField(
            model_name='orderline',
            name='pizza',
            field=models.ForeignKey(help_text='The pizza.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.Pizza'),
        ),
        migrations.AddField(
            model_name='order',
            name='pizzeria',
            field=models.ForeignKey(help_text='The pizzeria.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Pizzeria'),
        ),
        migrations.AddField(
            model_name='order',
            name='status',
            field=models.ForeignKey(help_text='The status.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.Status'),
        ),
        migrations.AddField(
            model_name='employed',
            name='person',
            field=models.OneToOneField(help_text='The person corresponding to this employed.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Person'),
        ),
        migrations.AddField(
            model_name='employed',
            name='pizzeria',
            field=models.ForeignKey(help_text='The pizzeria where working the employed.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Pizzeria'),
        ),
        migrations.AddField(
            model_name='employed',
            name='roles',
            field=models.ManyToManyField(help_text='The role of this user.', to='pizzapp.Role'),
        ),
        migrations.AddField(
            model_name='customer',
            name='person',
            field=models.OneToOneField(help_text='The person corresponding to this customer.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Person'),
        ),
        migrations.AddField(
            model_name='customer',
            name='type_addresses',
            field=models.ForeignKey(help_text='The person list type addresses.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.TypeAddress'),
        ),
        migrations.AddField(
            model_name='contact',
            name='person',
            field=models.OneToOneField(help_text='The person corresponding to this contact.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Person'),
        ),
        migrations.AddField(
            model_name='contact',
            name='supplier',
            field=models.ForeignKey(help_text='The supplier of the contact.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Supplier'),
        ),
        migrations.AddField(
            model_name='componentprice',
            name='supplier',
            field=models.ForeignKey(help_text='The supplier.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Supplier'),
        ),
        migrations.AddField(
            model_name='component',
            name='unit_of_measure',
            field=models.ForeignKey(help_text='The unit of measure.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.UnitOfMeasure'),
        ),
        migrations.AddField(
            model_name='commandline',
            name='component',
            field=models.ForeignKey(help_text='The supplier.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Component'),
        ),
        migrations.AddField(
            model_name='commandline',
            name='unit_of_measure',
            field=models.ForeignKey(help_text='The unit of measure.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.UnitOfMeasure'),
        ),
        migrations.AddField(
            model_name='command',
            name='employed',
            field=models.ForeignKey(help_text='The employed whose valid the command.', on_delete=django.db.models.deletion.PROTECT, to='pizzapp.Employed'),
        ),
        migrations.AddField(
            model_name='command',
            name='supplier',
            field=models.ForeignKey(help_text='The supplier.', on_delete=django.db.models.deletion.CASCADE, to='pizzapp.Supplier'),
        ),
    ]
